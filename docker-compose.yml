services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: "echo stat | nc localhost $$ZOOKEEPER_CLIENT_PORT"
    networks:
      - network-streams

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
    networks:
      - network-streams
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2048M
        reservations:
          cpus: '0.5'
          memory: 1024M

  kafka-setup:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka-setup
    depends_on:
      kafka:
        condition: service_started
    volumes:
      - ./container-create-kafka-topics.sh:/container-create-kafka-topics.sh
    command: ["sh", "/container-create-kafka-topics.sh"]
    networks:
      - network-streams

    
# Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_SCHEMA_REGISTRY: http://schema-registry:8081
      KAFKA_CLUSTERS_0_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: user:password
      KAFKA_CLUSTERS_0_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_CLUSTERS_0_SASL_MECHANISM: PLAIN
      KAFKA_CLUSTERS_0_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="user" password="password";
      KAFKA_CLUSTERS_0_SASL_USERNAME: user
      KAFKA_CLUSTERS_0_SASL_PASSWORD: password
    healthcheck:
      test: "curl -f http://localhost:8080 || exit 1"
    networks:
      - network-streams
    

# Redis
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - network-streams


# Application 1
  producer-app:
    build:
      context: ./spring-aplications/producer
      dockerfile: Dockerfile
    container_name: producer-app
    restart: unless-stopped
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    ports:
      - "8082:8082"
    depends_on:
      - kafka
      - redis
    networks:
      - network-streams
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    

# Application 2
  trade-order-simulator-app:
    build:
      context: ./spring-aplications/trade-order-simulator
      dockerfile: Dockerfile
    container_name: trade-order-simulator-app
    restart: unless-stopped
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - redis
    networks:
      - network-streams
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

# Application 3
  all-streams-app:
    build:
      context: ./spring-aplications/all-streams
      dockerfile: Dockerfile
    container_name: all-streams-app
    restart: unless-stopped
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    ports:
      - "8084:8084"
    depends_on:
      - kafka
      - kafka-setup
      - redis
    networks:
      - network-streams
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

# Application 4
  all-streams-many-builder-app:
    build:
      context: ./spring-aplications/all-streams-many-builder
      dockerfile: Dockerfile
    container_name: all-streams-many-builder-app
    restart: unless-stopped
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    ports:
      - "8085:8085"
    depends_on:
      - kafka
      - kafka-setup
      - redis
    networks:
      - network-streams
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

networks:
  network-streams:
    driver: bridge